<?xml version="1.0" encoding="UTF-8"?>
    <!--build_version=1.4-->
    
    
<project name="parse4cn1" default="default" basedir=".">
    <description>Builds, tests, and runs the project parse4cn1.</description>
    <import file="nbproject/build-impl.xml"/>
    <property file="codenameone_settings.properties"/>

    <target depends="init,compile,jar" name="compile-test">
    </target>

    <target depends="compile-test" name="-do-test-run">        
    </target>
    
    <target depends="-do-test-run" description="Run unit tests." name="test">
        <echo>Currently testing a library project isn't supported</echo>
    </target>

    <target name="-pre-compile">
        <echo>Compile is forcing compliance to the supported API's/features for maximum device compatibility. This allows smaller
        code size and wider device support</echo>
        <mkdir dir="build/tmp"/>
        <javac destdir="build/tmp"
            source="1.8"
            target="1.8"
            bootclasspath="lib/CLDC11.jar"
            classpath="${javac.classpath}:${build.classes.dir}">
            <src path="${src.dir}"/>
        </javac>        
    </target>

      
    <target name="-pre-init">
        <property name="javac.source" value="1.8" />
        <property name="javac.target" value="1.8" />
    </target>

    <target name="run">
        <echo>You can't run a library project</echo>
    </target>

    <target name="debug">
        <echo>You can't run a library project</echo>
    </target>

    <target name="Stubs">
        <delete dir="build/stubs"/>
        <javadoc sourcepath="src"
            classpath="lib/CodenameOne.jar:lib/CLDC11.jar:lib/CN1JSON.jar"
            docletpath="Stubber.jar"
            doclet="com.codename1.build.client.StubGenerator"> 
            <!-- TODO: Fix me!!! 
				Uncommenting causes the following error. Not entirely sure but maybe it has to do with
				some of the currently commented out or included files. Check again after all files have been ported
				and try to fix if it still occurs.
				
				See also: https://www.google.nl/search?q=javadoc+java.lang.IllegalStateException%3A+endPosTable+already+set&oq=javadoc+java.lang.IllegalStateException%3A+endPosTable+already+set
				
				java.lang.IllegalStateException: endPosTable already set
				at com.sun.tools.javac.util.DiagnosticSource.setEndPosTable(DiagnosticSource.java:136)
				at com.sun.tools.javac.util.Log.setEndPosTable(Log.java:350)
				at com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:670)
				at com.sun.tools.javadoc.JavadocTool.parsePackageClasses(JavadocTool.java:243)
				at com.sun.tools.javadoc.JavadocTool.getRootDocImpl(JavadocTool.java:180)
				at com.sun.tools.javadoc.Start.parseAndExecute(Start.java:346)
				at com.sun.tools.javadoc.Start.begin(Start.java:219)
				at com.sun.tools.javadoc.Start.begin(Start.java:205)
				at com.sun.tools.javadoc.Main.execute(Main.java:64)
				at com.sun.tools.javadoc.Main.main(Main.java:54)
				javadoc: error - fatal exception
			-->
            <!-- <fileset dir="${src.dir}" excludes="*.java,${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset> -->
         </javadoc>
    </target>

    <target name="-post-compile" depends="Stubs">
        <mkdir dir="build/lib" />
        <zip basedir="${build.classes.dir}" compress="false" destfile="build/lib/main.zip" />
        <zip basedir="build/stubs" compress="false" destfile="build/lib/stubs.zip" />
        <copy file="manifest.properties" todir="build/lib" />
        <antcall target="buildNativeIOS" />        
        <antcall target="buildNativeRIM" />        
        <antcall target="buildNativeAND" />        
        <antcall target="buildNativeSE" />        
        <antcall target="buildNativeWIN" />        
        <antcall target="buildNativeME" />       
        <mkdir dir="dist" />
        <zip basedir="build/lib" compress="true" destfile="dist/${application.title}.cn1lib" />
	<copy file="NOTICE.txt" todir="dist" failonerror="true" />
        <copy file="lib/CN1JSON.cn1lib" todir="dist" failonerror="true" />
        <copy file="test/CN1TestApp/JavaSE.jar" todir="dist/lib" failonerror="true" />
    </target>
    
    <target name="buildNativeRIM">
        <path id="rimNativeDir">
            <fileset dir="native/rim"/>
        </path> 
        <property name="test.rimDir.property" refid="rimNativeDir"/> 
        <condition property="doesntHaveRimFiles">
            <equals arg1="" arg2="${test.rimDir.property}"/>
        </condition> 

        <antcall target="createRimZip" />        
    </target>
    
    <target name="createRimZip"
        unless="doesntHaveRimFiles">
        <echo>Zipping rim native code</echo>
        <zip basedir="native/rim" compress="false" destfile="build/lib/nativerim.zip" />
    </target>

    <target name="buildNativeAND">
        <path id="andNativeDir">
            <fileset dir="native/android"/>
        </path> 
        <property name="test.andDir.property" refid="andNativeDir"/> 
        <condition property="doesntHaveAndFiles">
            <equals arg1="" arg2="${test.andDir.property}"/>
        </condition> 

        <antcall target="createAndZip" />        
    </target>
    
    <target name="buildNativeSE">
        <mkdir dir="native/javase" />
        <path id="seNativeDir">
            <fileset dir="native/javase"/>
        </path> 
        <property name="test.seDir.property" refid="seNativeDir"/> 
        <condition property="doesntHaveSeFiles">
            <equals arg1="" arg2="${test.seDir.property}"/>
        </condition> 

        <antcall target="createSeZip" />        
    </target>

    <target name="createSeZip"
        unless="doesntHaveSeFiles">
        <echo>Zipping JavaSE native code</echo>
        <zip basedir="native/javase" compress="false" destfile="build/lib/nativese.zip" />
    </target>

    <target name="createAndZip"
        unless="doesntHaveAndFiles">
        <echo>Zipping Android native code</echo>
        <zip basedir="native/android" compress="false" destfile="build/lib/nativeand.zip" />
    </target>

    <target name="buildNativeWIN">
        <path id="winNativeDir">
            <fileset dir="native/win"/>
        </path> 
        <property name="test.winDir.property" refid="winNativeDir"/> 
        <condition property="doesntHaveWinFiles">
            <equals arg1="" arg2="${test.winDir.property}"/>
        </condition> 

        <antcall target="createWinZip" />        
    </target>
    
    <target name="createWinZip"
        unless="doesntHaveWinFiles">
        <echo>Zipping win native code</echo>
        <zip basedir="native/win" compress="false" destfile="build/lib/nativewin.zip" />
    </target>

    <target name="buildNativeIOS">
        <path id="iosNativeDir">
            <fileset dir="native/ios"/>
        </path> 
        <property name="test.iosDir.property" refid="iosNativeDir"/> 
        <condition property="doesntHaveIosFiles">
            <equals arg1="" arg2="${test.iosDir.property}"/>
        </condition> 

        <antcall target="createIosZip" />        
    </target>
    
    <target name="createIosZip"
        unless="doesntHaveIosFiles">
        <echo>Zipping ios native code</echo>
        <zip basedir="native/ios" compress="false" destfile="build/lib/nativeios.zip" />
    </target>

    <target name="buildNativeME">
        <path id="meNativeDir">
            <fileset dir="native/j2me"/>
        </path> 
        <property name="test.meDir.property" refid="meNativeDir"/> 
        <condition property="doesntHaveMeFiles">
            <equals arg1="" arg2="${test.meDir.property}"/>
        </condition> 

        <antcall target="createMeZip" />        
    </target>
    
    <target name="createMeZip"
        unless="doesntHaveMeFiles">
        <echo>Zipping me native code</echo>
        <zip basedir="native/j2me" compress="false" destfile="build/lib/nativeme.zip" />
    </target>
    
</project>
